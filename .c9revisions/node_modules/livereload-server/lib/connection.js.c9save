{"ts":1358522999487,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Generated by IcedCoffeeScript 1.3.3f\n(function() {\n  var EventEmitter, HandshakeTimeout, LRWebSocketConnection, Parser, debug,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  debug = require('debug')('livereload:server');\n\n  EventEmitter = require('events').EventEmitter;\n\n  Parser = require('livereload-protocol');\n\n  HandshakeTimeout = 1000;\n\n  LRWebSocketConnection = (function(_super) {\n\n    __extends(LRWebSocketConnection, _super);\n\n    function LRWebSocketConnection(socket, id, options) {\n      var protocols,\n        _this = this;\n      this.socket = socket;\n      this.id = id;\n      this.options = options;\n      protocols = {\n        monitoring: [Parser.protocols.MONITORING_7],\n        conncheck: [Parser.protocols.CONN_CHECK_1]\n      };\n      if (this.options.protocols.saving >= 1) {\n        protocols.saving = [Parser.protocols.SAVING_1];\n      }\n      this.parser = new Parser('server', protocols);\n      this.socket.on('message', function(data) {\n        debug(\"LRWebSocketConnection(\" + _this.id + \") received \" + data);\n        return _this.parser.received(data);\n      });\n      this.socket.on('close', function() {\n        if (_this._handshakeTimeout) {\n          clearTimeout(_this._handshakeTimeout);\n          _this._handshakeTimeout = null;\n        }\n        return _this.emit('disconnected');\n      });\n      this.parser.on('error', function(err) {\n        _this.socket.close();\n        return _this.emit('error', err);\n      });\n      this.parser.on('command', function(command) {\n        if (command.command === 'ping') {\n          return _this.send({\n            command: 'pong',\n            token: command.token\n          });\n        } else {\n          return _this.emit('command', command);\n        }\n      });\n      this.parser.on('connected', function() {\n        if (_this._handshakeTimeout) {\n          clearTimeout(_this._handshakeTimeout);\n          _this._handshakeTimeout = null;\n        }\n        _this.send(_this.parser.hello(_this.options));\n        return _this.emit('connected');\n      });\n      this._handshakeTimeout = setTimeout((function() {\n        _this._handshakeTimeout = null;\n        return _this.socket.close();\n      }), HandshakeTimeout);\n    }\n\n    LRWebSocketConnection.prototype.close = function() {\n      return this.socket.close();\n    };\n\n    LRWebSocketConnection.prototype.send = function(command) {\n      this.parser.sending(command);\n      return this.socket.send(JSON.stringify(command));\n    };\n\n    LRWebSocketConnection.prototype.isMonitoring = function() {\n      var _ref;\n      return ((_ref = this.parser.negotiatedProtocols) != null ? _ref.monitoring : void 0) >= 7;\n    };\n\n    return LRWebSocketConnection;\n\n  })(EventEmitter);\n\n  module.exports = LRWebSocketConnection;\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":3051}]],"length":3051}
