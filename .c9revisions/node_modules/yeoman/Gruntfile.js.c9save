{"ts":1358878025478,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var util = require('util');\nvar path = require('path');\n\nmodule.exports = function( grunt ) {\n  'use strict';\n\n  grunt.initConfig({\n    lint: {\n      options: {\n        options: '<json:.jshintrc>',\n        global: {\n          process: true\n        }\n      },\n      grunt: [\n        'Gruntfile.js',\n        //'tasks/*.js',\n      ],\n      lib: [\n        //'lib/{plugins,utils}/*.js',\n        //'lib/generators/*.js'\n      ],\n      test: [\n        //'test/**/*.js'\n      ]\n    },\n    watch: {\n      files: '<config:lint>',\n      tasks: 'lint'\n    }\n  });\n\n  // Disable lint for now until we upgrade to latest grunt with latest jshint\n  grunt.registerTask( 'default', 'lint' );\n\n  // Debugging helpers\n  grunt.registerTask( 'list-helpers', 'List all grunt registered helpers', function( helper ) {\n    var ls = grunt.log.wordlist( Object.keys( grunt.task._helpers ), grunt.util.linefeed );\n\n    if ( !helper ) {\n      return grunt.log.ok( ls );\n    }\n\n    grunt.log.subhead( helper + ' source:' ).writeln( grunt.task._helpers[ helper ] );\n  });\n\n  grunt.registerTask( 'list-tasks', 'List all grunt registered tasks', function( task ) {\n    var ls = grunt.log.wordlist( Object.keys( grunt.task._tasks ), grunt.util.linefeed );\n\n    if ( !task ) {\n      return grunt.log.ok( ls );\n    }\n\n    grunt.log.subhead( task + ' source:' ).writeln( util.inspect( grunt.task._tasks[ task ] ) );\n  });\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":1388}]],"length":1388}
